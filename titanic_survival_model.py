# -*- coding: utf-8 -*-
"""Titanic Survival Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_QHcDJ45OyG5Qou7mAvBUnWtHb0vxlXd
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

titanic_data= pd.read_csv('/content/titanic_train.csv')
print(titanic_data.head())

#Number of People suvived
sns.countplot(x='Survived',data=titanic_data)

#Male V/s Female
sns.countplot(x='Survived',data=titanic_data,hue='Sex')

#Check if there are any null values
titanic_data.isna().sum()

#Vilzualisation
sns.heatmap(titanic_data.isna())

sns.displot(x='Age',data=titanic_data)

#filling the blank ages
mean_age=titanic_data['Age'].mean()
titanic_data['Age'].fillna(mean_age , inplace=True)

#just to check
titanic_data['Age'].isna().sum()

"""We have to drop cabin cooumn due very high number of na values."""

#Convert sex coloumn to numbers for our ease
gender = pd.get_dummies(titanic_data['Sex'],drop_first=True)

#Add this coloumn of gender in our data set
titanic_data['Gender']=gender

#Droppping the coloumns that are not usefull for plotting :-Name , Sex,Ticket,Embarked

titanic_data.drop(['Name','Sex','Ticket','Embarked'],axis=1,inplace=True)

#Let's check
titanic_data.head()

x=titanic_data[['PassengerId','Pclass','Age','SibSp','Parch','Fare','Gender']]
y=titanic_data['Survived']

"""**DATA MODELLING**"""

#import train testsplit method
from sklearn.model_selection import train_test_split

#train text split
x_train, x_test , y_train , y_test = train_test_split(x,y, test_size=0.33 , random_state=42)

#import logistic regression
from sklearn.linear_model import LogisticRegression

#Fit Logistic Regression
lr=LogisticRegression()
lr.fit(x_train,y_train)

#predicting
predict=lr.predict(x_test)

#Printing Confusion Matrix
from sklearn.metrics import confusion_matrix
pd.DataFrame(confusion_matrix(y_test,predict),columns=['Predicted NO','Predicted YES'], index=['Actual NO','Actual YES'])

from sklearn.metrics import classification_report
print(classification_report(y_test,predict))